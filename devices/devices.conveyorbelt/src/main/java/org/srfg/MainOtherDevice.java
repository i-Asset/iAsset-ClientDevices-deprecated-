package org.srfg;

import java.awt.event.ItemEvent;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.AbstractButton;

import org.srfg.basedevice.BaseOtherDevice;

import at.srfg.iot.common.aas.IAssetModel;
import at.srfg.iot.common.datamodel.asset.aas.common.referencing.Reference;

/********************************************************************************************************
 * This class contains the main function implementation and
 * serves as the belt client starting point
 *
 * @author mathias.schmoigl
 ********************************************************************************************************/
public class MainOtherDevice extends BaseOtherDevice {

    /*********************************************************************************************************
     * Creates new form CustomApp
     ********************************************************************************************************/
    public MainOtherDevice() {
        initComponents();
    }

    @Override
    public String getName() {return "belt";}

    @Override
    public String getDirectory() {return "/lab/belt/belt01";}


    /*********************************************************************************************************
     * initComponents
     *
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     ********************************************************************************************************/
    @SuppressWarnings("unchecked")
    @Override
    protected void initComponents() {

        jToggleButton.setText("Verbinde zu Device");
        jToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jToggleButton1ItemStateChanged(evt);
            }
        });
        jMoveBelt.setText("Ausf체hren");
        jLabel1.setText("Distanz");
        jLabel2.setText("Lampe ein/ausschalten");
        jLabel3.setText("Richtung");
        jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ganz minimal", "Minimal", "Weiter", "Zu weit?" }));
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vorw채rts", "R체ckw채rts"}));
//        jComboBox.addItemListener(new java.awt.event.ItemListener() {
//            public void itemStateChanged(java.awt.event.ItemEvent evt) {
//                jComboBox1ItemStateChanged(evt);
//            }
//        });
        jMoveBelt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
//        jComboBox.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jComboBox1ActionPerformed(evt);
//            }
//        });

        jCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
//        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
//            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                jComboBox3ActionPerformed(evt);
//            }
//        });

        jCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(36, 36, 36)
                                                .addComponent(jLabel1)
                                                .addGap(39, 39, 39)
                                                .addComponent(jComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(36, 36, 36)
                                                .addComponent(jLabel3)
                                                .addGap(39, 39, 39)
                                                .addComponent(jComboBox3, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(39, 39, 39)
                                                .addComponent(jMoveBelt))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(36, 36, 36)
                                                .addComponent(jLabel2)
                                                .addGap(39, 39, 39)
                                                .addComponent(jCheckBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(15, 15, 15)
                                                .addComponent(jToggleButton)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(7, 7, 7)
                                .addComponent(jToggleButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel3)
                                        .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jMoveBelt))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2)
                                        .addComponent(jCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }

    /*********************************************************************************************************
     * jComboBox1ActionPerformed
     ********************************************************************************************************/
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
    	moveBelt();
    }
    /*********************************************************************************************************
     * jComboBox3ActionPerformed
     ********************************************************************************************************/
    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {
    	moveBelt();
    }

    /*********************************************************************************************************
     * jToggleButton1ItemStateChanged
     ********************************************************************************************************/
    private void jToggleButton1ItemStateChanged(java.awt.event.ItemEvent evt) {
        switch (evt.getStateChange()) {
            case 1:
                jToggleButton.setText("Trenne von Device");

                // start communication
                model = connectToDevice();
                runner = doIt(model);
                runner.start();
                break;
            case 2:
                jToggleButton.setText("Verbinde mit Device");
                if (runner != null && runner.isAlive()) {
                    model = null;
                    runner.interrupt();
                }
                break;
        }
    }

    /*********************************************************************************************************
     * jCheckBox1ActionPerformed
     ********************************************************************************************************/
    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {

        AbstractButton abstractButton = (AbstractButton) evt.getSource();

        Map<String,Object> params = new HashMap<String, Object>(); // TODO for monday: check if this works at all?
        params.put("state", abstractButton.getModel().isSelected());
        if ( connectedDevice != null ) {
        	connectedDevice.execute("operations/switchBusyLight", params);
        	
        }
//        registry.invokeOperation(connectedDevice.getRoot().getIdentification(), "operations/setLight", params);
    }


    /*********************************************************************************************************
     * jComboBox1ItemStateChanged
     ********************************************************************************************************/
    private void jComboBox1ItemStateChanged(ItemEvent evt) {
    	if ( evt.getStateChange() == ItemEvent.SELECTED) {
    		double speed = 0.0;
    		switch(evt.getItem().toString()) {
    		case "Geringe Distanz": speed = 0.1; break;
    		case "Mittlere Distanz": speed = 0.2; break;
    		case "Weite Distanz": speed = 0.25; break;
    		case "Sehr weite Distanz": speed = 0.4; break;
    		default: speed = 0.0; break;
    		}
    		
    		if ( registry != null ) { // TODO for monday: check if this works at all?
    			Map<String, Object> params = new HashMap<String, Object>();
    			params.put("direction", "left");
    			params.put("distance", speed);
    			Map<String,Object> result = connectedDevice.execute("operations/moveBelt", params);
    			System.out.println(result.get("success"));
    		}
    	}
    }
    private void moveBelt() {
    	String richtung = jComboBox3.getSelectedItem().toString();
    	String entfernung = jComboBox.getSelectedItem().toString();
    	String direction = (richtung == "Vorw채rts"? "left" : "right");
    	double distance = getEntfernung(entfernung);
		if ( registry != null ) { // TODO for monday: check if this works at all?
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("direction", direction);
			params.put("distance", distance);
			Map<String,Object> result = connectedDevice.execute("operations/moveBelt", params);
			System.out.println(result.get("success"));
		}
    	
    }
    private double getEntfernung(String txt) {
        //jComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ganz minimal", "Minimal", "Weiter", "Zu weit?" }));
    	switch (txt) {
		case "Ganz minimal": return 0.1; 
		case "Minimal": return 0.2; 
		case "Weiter": return 0.25;
		case "Zu weit?": return  0.4; 
		default: return 0.0; 
    	
    	}
    }
    /*********************************************************************************************************
     * doIt
     ********************************************************************************************************/
    @Override
    protected Thread doIt(final IAssetModel model) {
        Runnable runnable = new Runnable() {

            @Override
            public void run() {
                try {
                    while (true) {
                        Thread.sleep(500);
                        
                        // Retrieve the current temperature from the model provider
                        Object result = model.getElementValue("properties/beltData");
                        if ( Map.class.isInstance(result)) {
                        	@SuppressWarnings("unchecked")
							Map<String,Object> map = (Map<String,Object>) result;
                          jTextArea1.setText( "Distance: " + map.get("distance") + "\n" +
                        		  			  "Status..: " + map.get("state") + "\n" +
                        		  			  "Richtung: " + map.get("direction") + "\n" +
                        		  			  "Aktiv...: " + map.get("moving")  );
                        	
                        }
                        else {
                        	jTextArea1.setText(result.toString());
                        }
                    }
                } catch (InterruptedException ex) {
                    // stop the thread now
                    Logger.getLogger(MainOtherDevice.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        return new Thread(runnable);
    }

    /*********************************************************************************************************
     * main program entrance
     ********************************************************************************************************/
    public static void main(String[] args)
    {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainOtherDevice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainOtherDevice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainOtherDevice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainOtherDevice.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainOtherDevice().setVisible(true);
            }
        });
    }
}
