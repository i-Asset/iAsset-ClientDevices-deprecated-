package franka_msgs;

public interface FrankaState extends org.ros.internal.message.Message {
  static final java.lang.String _TYPE = "franka_msgs/FrankaState";
  static final java.lang.String _DEFINITION = "std_msgs/Header header\nfloat64[6] cartesian_collision\nfloat64[6] cartesian_contact\nfloat64[7] q\nfloat64[7] q_d\nfloat64[7] dq\nfloat64[7] dq_d\nfloat64[7] ddq_d\nfloat64[7] theta\nfloat64[7] dtheta\nfloat64[7] tau_J\nfloat64[7] dtau_J\nfloat64[7] tau_J_d\nfloat64[6] K_F_ext_hat_K\nfloat64[2] elbow\nfloat64[2] elbow_d\nfloat64[2] elbow_c\nfloat64[2] delbow_c\nfloat64[2] ddelbow_c\nfloat64[7] joint_collision\nfloat64[7] joint_contact\nfloat64[6] O_F_ext_hat_K\nfloat64[6] O_dP_EE_d\nfloat64[6] O_dP_EE_c\nfloat64[6] O_ddP_EE_c\nfloat64[7] tau_ext_hat_filtered\nfloat64 m_ee\nfloat64[3] F_x_Cee\nfloat64[9] I_ee\nfloat64 m_load\nfloat64[3] F_x_Cload\nfloat64[9] I_load\nfloat64 m_total\nfloat64[3] F_x_Ctotal\nfloat64[9] I_total\nfloat64[16] O_T_EE\nfloat64[16] O_T_EE_d\nfloat64[16] O_T_EE_c\nfloat64[16] F_T_EE\nfloat64[16] EE_T_K\nfloat64 time\nfloat64 control_command_success_rate\nuint8 ROBOT_MODE_OTHER=0\nuint8 ROBOT_MODE_IDLE=1\nuint8 ROBOT_MODE_MOVE=2\nuint8 ROBOT_MODE_GUIDING=3\nuint8 ROBOT_MODE_REFLEX=4\nuint8 ROBOT_MODE_USER_STOPPED=5\nuint8 ROBOT_MODE_AUTOMATIC_ERROR_RECOVERY=6\nuint8 robot_mode\nfranka_msgs/Errors current_errors\nfranka_msgs/Errors last_motion_errors\n";
  static final byte ROBOT_MODE_OTHER = 0;
  static final byte ROBOT_MODE_IDLE = 1;
  static final byte ROBOT_MODE_MOVE = 2;
  static final byte ROBOT_MODE_GUIDING = 3;
  static final byte ROBOT_MODE_REFLEX = 4;
  static final byte ROBOT_MODE_USER_STOPPED = 5;
  static final byte ROBOT_MODE_AUTOMATIC_ERROR_RECOVERY = 6;
  std_msgs.Header getHeader();
  void setHeader(std_msgs.Header value);
  double[] getCartesianCollision();
  void setCartesianCollision(double[] value);
  double[] getCartesianContact();
  void setCartesianContact(double[] value);
  double[] getQ();
  void setQ(double[] value);
  double[] getQD();
  void setQD(double[] value);
  double[] getDq();
  void setDq(double[] value);
  double[] getDqD();
  void setDqD(double[] value);
  double[] getDdqD();
  void setDdqD(double[] value);
  double[] getTheta();
  void setTheta(double[] value);
  double[] getDtheta();
  void setDtheta(double[] value);
  double[] getTauJ();
  void setTauJ(double[] value);
  double[] getDtauJ();
  void setDtauJ(double[] value);
  double[] getTauJD();
  void setTauJD(double[] value);
  double[] getKFExtHatK();
  void setKFExtHatK(double[] value);
  double[] getElbow();
  void setElbow(double[] value);
  double[] getElbowD();
  void setElbowD(double[] value);
  double[] getElbowC();
  void setElbowC(double[] value);
  double[] getDelbowC();
  void setDelbowC(double[] value);
  double[] getDdelbowC();
  void setDdelbowC(double[] value);
  double[] getJointCollision();
  void setJointCollision(double[] value);
  double[] getJointContact();
  void setJointContact(double[] value);
  double[] getOFExtHatK();
  void setOFExtHatK(double[] value);
  double[] getODPEED();
  void setODPEED(double[] value);
  double[] getODPEEC();
  void setODPEEC(double[] value);
  double[] getODdPEEC();
  void setODdPEEC(double[] value);
  double[] getTauExtHatFiltered();
  void setTauExtHatFiltered(double[] value);
  double getMEe();
  void setMEe(double value);
  double[] getFXCee();
  void setFXCee(double[] value);
  double[] getIEe();
  void setIEe(double[] value);
  double getMLoad();
  void setMLoad(double value);
  double[] getFXCload();
  void setFXCload(double[] value);
  double[] getILoad();
  void setILoad(double[] value);
  double getMTotal();
  void setMTotal(double value);
  double[] getFXCtotal();
  void setFXCtotal(double[] value);
  double[] getITotal();
  void setITotal(double[] value);
  double[] getOTEE();
  void setOTEE(double[] value);
  double[] getOTEED();
  void setOTEED(double[] value);
  double[] getOTEEC();
  void setOTEEC(double[] value);
  double[] getFTEE();
  void setFTEE(double[] value);
  double[] getEETK();
  void setEETK(double[] value);
  double getTime();
  void setTime(double value);
  double getControlCommandSuccessRate();
  void setControlCommandSuccessRate(double value);
  byte getRobotMode();
  void setRobotMode(byte value);
  franka_msgs.Errors getCurrentErrors();
  void setCurrentErrors(franka_msgs.Errors value);
  franka_msgs.Errors getLastMotionErrors();
  void setLastMotionErrors(franka_msgs.Errors value);
}
